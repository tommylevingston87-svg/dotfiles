
# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new MySQL flexible server
.Description
Creates a new MySQL flexible server
#>

$DEFAULT_DB_NAME = 'flexibleserverdb'
$DELEGATION_SERVICE_NAME = "Microsoft.DBforMySQL/flexibleServers"
$DEFAULT_VNET_PREFIX = '10.0.0.0/16'
$DEFAULT_SUBNET_PREFIX = '10.0.0.0/24'
$AZURE_ARMNAME = '^[^<>%&:\\?/]{1,260}$'

function New-AzMySqlFlexibleServer {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.Api20210501.IServerAutoGenerated])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[Microsoft.Azure.PowerShell.Cmdlets.MySql.Description('Creates a new MySQL flexible server.')]
param(
    [Parameter(HelpMessage = 'The name of the server.')]
    [Alias('ServerName')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
    [System.String]
    ${Name},

    [Parameter(HelpMessage = 'The name of the resource group that contains the resource, You can obtain this value from the Azure Resource Manager API or the portal.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
    [System.String]
    ${ResourceGroupName},

    [Parameter(HelpMessage='The subscription ID that identifies an Azure subscription.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    ${SubscriptionId},

    [Parameter(HelpMessage = 'The location the resource resides in.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.String]
    ${Location},

    [Parameter(HelpMessage = 'Availability zone into which to provision the resource.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.String]
    ${Zone},

    [Parameter(HelpMessage = 'Administrator username for the server. Once set, it cannot be changed.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.String]
    ${AdministratorUserName},

    [Parameter(HelpMessage = 'The password of the administrator. Minimum 8 characters and maximum 128 characters. Password must contain characters from three of the following categories: English uppercase letters, English lowercase letters, numbers, and non-alphanumeric characters.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.Security.SecureString]
    [ValidateNotNullOrEmpty()]
    ${AdministratorLoginPassword},

    [Parameter(HelpMessage = 'The name of the sku, typically, tier + family + cores, e.g. Standard_B1ms, Standard_D2ds_v4.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.String]
    ${Sku},

    [Parameter(HelpMessage = 'Compute tier of the server. Accepted values: Burstable, GeneralPurpose, Memory Optimized. Default: Burstable.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [Validateset('Burstable', 'GeneralPurpose', 'MemoryOptimized')]
    [System.String]
    ${SkuTier},

    [Parameter(HelpMessage = "Backup retention days for the server. Day count is between 1 and 35.")]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.Int32]
    ${BackupRetentionDay},

    [Parameter(HelpMessage = 'Max storage allowed for a server.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.Int32]
    ${StorageInMb},

    [Parameter(HelpMessage='Enable or disable Storage Auto Grow. The default value is Disabled')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow])]
    [Validateset('Enabled', 'Disabled')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow]
    ${StorageAutogrow},

    [Parameter(HelpMessage = "Number of IOPS to be allocated for this server. You will get certain amount of free IOPS based on compute and storage provisioned. The default value for IOPS is free IOPS.")]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [System.Int32]
    ${Iops},

    [Parameter(HelpMessage = 'Application-specific metadata in the form of key-value pairs.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.Api20171201.IServerForCreateTags]))]
    [System.Collections.Hashtable]
    ${Tag},

    [Parameter(HelpMessage = 'Server version.')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.ServerVersion])]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.ServerVersion]
    ${Version},

    [Parameter(HelpMessage = 'The subnet IP address prefix to use when creating a new vnet in CIDR format. Default value is 10.0.0.0/24.')]
    [System.String]
    ${SubnetPrefix},

    [Parameter(HelpMessage = 'The Name or Id of an existing Subnet or name of a new one to create. Use resource ID if you want to use a subnet from different resource group. Please note that the subnet will be delegated to Microsoft.DBforMySQL/flexibleServers. After delegation, this subnet cannot be used for any other type of Azure resources.')]
    [System.String]
    ${Subnet},

    [Parameter(HelpMessage = 'The IP address prefix to use when creating a new vnet in CIDR format. Default value is 10.0.0.0/16.')]
    [System.String]
    ${VnetPrefix},

    [Parameter(HelpMessage = 'The Name or Id of an existing virtual network or name of a new one to create. The name must be between 2 to 64 characters. The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.')]
    [System.String]
    ${Vnet},

    [Parameter(HelpMessage = 'The id of an existing private dns zone. The suffix of dns zone has to be same as that of fully qualified domain of the server.')]
    [System.String]
    ${PrivateDnsZone},

    [Parameter(HelpMessage = "Determines the public access. Allowed values: All, None, IP address range (e.g., 1.1.1.1-1.1.1.5, 1.1.1.1) Specifying 0.0.0.0 allows public access from any resources deployed within Azure to access your server. Specifying no IP address sets the server in public access mode but does not create a firewall rule.")]
    [System.String]
    ${PublicAccess},

    [Parameter(HelpMessage = "Enable or disable high availability feature. Allowed values are 'ZoneRedundant', 'SameZone', and 'Disabled'. Default value is Disabled.")]
    [Validateset('ZoneRedundant', 'SameZone', 'Disabled')]
    [Alias('HaEnabled')]
    [System.String]
    ${HighAvailability},

    [Parameter(HelpMessage = 'The credentials, account, tenant, and subscription used for communication with Azure.')]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Azure')]
    [System.Management.Automation.PSObject]
    ${DefaultProfile},

    [Parameter(HelpMessage = 'Run the command as a job.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    ${AsJob},

    [Parameter(DontShow, HelpMessage = 'Wait for .NET debugger to attach.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline.
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline.
    ${HttpPipelinePrepend},

    [Parameter(HelpMessage = 'Run the command asynchronously.')]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use.
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call.
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy.
    ${ProxyUseDefaultCredentials}
)

process {
    try {
        if (!$PSBoundParameters.ContainsKey('Location')) {
            $PSBoundParameters.Location = 'westus2'
        }

        if ($PSBoundParameters.ContainsKey('Zone')) {
            $PSBoundParameters.AvailabilityZone = $PSBoundParameters.Zone
            $null = $PSBoundParameters.Remove('Zone')
        }

        if (!$PSBoundParameters.ContainsKey('AdministratorLoginPassword')) {
            $Password = Get-GeneratePassword
            $PSBoundParameters.AdministratorLoginPassword = $Password | ConvertTo-SecureString -AsPlainText -Force
        }

        Import-Module -Name Az.Resources

        if(!$PSBoundParameters.ContainsKey('ResourceGroupName')) {
            $PSBoundParameters.ResourceGroupName = Get-RandomNumbers -Prefix 'group' -Length 10
            $Msg = "Creating Resource Group {0}..." -f $PSBoundParameters.ResourceGroupName
            Write-Host $Msg
            if($PSCmdlet.ShouldProcess($PSBoundParameters.ResourceGroupName)) {
                $null = New-AzResourceGroup -Name $PSBoundParameters.ResourceGroupName -Location $PSBoundParameters.Location -Force
            }
        }
        else {
            $Msg = 'Checking the existence of the resource group {0} ...' -f $PSBoundParameters.ResourceGroupName
            Write-Host $Msg
            try {
                $null = Get-AzResourceGroup -Name $PSBoundParameters.ResourceGroupName -ErrorAction Stop
                $Msg = 'Resource group {0} exists ? : True' -f $PSBoundParameters.ResourceGroupName
                Write-Host $Msg
            }
            catch {
                $Msg = 'Resource group {0} exists ? : False' -f $PSBoundParameters.ResourceGroupName
                Write-Host $Msg
                $Msg = "Creating Resource Group {0}..." -f $PSBoundParameters.ResourceGroupName
                Write-Host $Msg
                if($PSCmdlet.ShouldProcess($PSBoundParameters.ResourceGroupName)) {
                    $null = New-AzResourceGroup -Name $PSBoundParameters.ResourceGroupName -Location $PSBoundParameters.Location -Force
                }

            }
        }

        if (!$PSBoundParameters.ContainsKey('Name')) {
            $PSBoundParameters.Name = Get-RandomNumbers -Prefix 'server' -Length 10
        }

        if (!$PSBoundParameters.ContainsKey('SkuTier')) {
            $PSBoundParameters.SkuTier = 'Burstable'
        }

        if ($PSBoundParameters.ContainsKey('Sku')) {
            $PSBoundParameters.SkuName = $PSBoundParameters['Sku']
            $null = $PSBoundParameters.Remove('Sku')
        }
        else {
            $PSBoundParameters.SkuName = 'Standard_B1ms'
        }

        if (!$PSBoundParameters.ContainsKey('BackupRetentionDay')) {
            $PSBoundParameters.BackupRetentionDay = 7
        }

        if ($PSBoundParameters.ContainsKey('StorageInMb')) {
            $PSBoundParameters.StorageSizeGb = [Math]::floor($PSBoundParameters['StorageInMb'] / 1024)
            $null = $PSBoundParameters.Remove('StorageInMb')
        }
        else {
            $PSBoundParameters.StorageSizeGb = 32
        }

        if ($PSBoundParameters.ContainsKey('StorageAutogrow') -And $PSBoundParameters['StorageAutogrow'] -eq 'Enabled') {
            $PSBoundParameters.StorageAutoGrow = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow]::Enabled
        }
        else {
            $PSBoundParameters.StorageAutoGrow = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow]::Disabled
        }

        if ($PSBoundParameters.ContainsKey('Iops')) {
            $PSBoundParameters.StorageIop = $PSBoundParameters.Iops
            $null = $PSBoundParameters.Remove('Iops')
        }

        if ($PSBoundParameters.ContainsKey('HighAvailability')){
            if($PSBoundParameters['HighAvailability'].ToLower() -eq 'disabled'){
                $PSBoundParameters["HighAvailabilityMode"] = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.HighAvailabilityMode]::Disabled
            }
            elseif($PSBoundParameters['HighAvailability'].ToLower() -eq 'zoneredundant') {
                if ($PSBoundParameters.SkuTier -eq 'Burstable') {
                    throw "Zone redundant high availability cannot be enabled for Burstable tier."
                }
                $PSBoundParameters["HighAvailabilityMode"] = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.HighAvailabilityMode]::ZoneRedundant
                $PSBoundParameters.StorageAutoGrow = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow]::Enabled
            }
            elseif($PSBoundParameters['HighAvailability'].ToLower() -eq 'samezone') {
                $PSBoundParameters.HighAvailabilityMode = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.HighAvailabilityMode]::SameZone
                $PSBoundParameters.StorageAutoGrow = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.StorageAutogrow]::Enabled
            }
            $null = $PSBoundParameters.Remove('HighAvailability')
        }

        if (!$PSBoundParameters.ContainsKey('Version')) {
            $PSBoundParameters.Version = '5.7'
        }

        if ($PSBoundParameters.ContainsKey('AdministratorUserName')) {
            $PSBoundParameters.AdministratorLogin = $PSBoundParameters['AdministratorUserName']
            $null = $PSBoundParameters.Remove('AdministratorUserName')
        }
        else {
            $PSBoundParameters.AdministratorLogin = Get-RandomName
        }

        $PSBoundParameters.CreateMode = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Support.CreateMode]::Default

        # Handling Vnet & Subnet
        $NetworkKeys = 'PublicAccess', 'Subnet', 'Vnet', 'SubnetPrefix', 'VnetPrefix', 'PrivateDnsZone'
        $NetworkParameters = @{}
        foreach($Key in $NetworkKeys){
            if ($PSBoundParameters.ContainsKey($Key)){ 
                $NetworkParameters[$Key] = $PSBoundParameters[$Key]
                $null = $PSBoundParameters.Remove($Key)
            }
        }
        $RequiredKeys = 'SubscriptionId', 'ResourceGroupName', 'Name', 'Location'
        foreach($Key in $RequiredKeys){ $NetworkParameters[$Key] = $PSBoundParameters[$Key] }

        if ($NetworkParameters.ContainsKey('Vnet') -Or  $NetworkParameters.ContainsKey('Subnet')){
            $VnetSubnetParameters = CreateNetworkResource $NetworkParameters
            $SubnetId = GetSubnetId $VnetSubnetParameters.ResourceGroupName $VnetSubnetParameters.VnetName $VnetSubnetParameters.SubnetName
            $VnetId = [string]::Join("/",$SubnetId.split("/")[0..8])
            $PSBoundParameters.NetworkDelegatedSubnetResourceId = $SubnetId
            if ([string]::IsNullOrEmpty($PSBoundParameters.NetworkDelegatedSubnetResourceId)) {
                $null = $PSBoundParameters.Remove('NetworkDelegatedSubnetResourceId')
            }
            if ($NetworkParameters.ContainsKey('PrivateDnsZone')){
                if (!(Get-Module -ListAvailable -Name Az.PrivateDns)) {
                    throw 'Please install Az.Network module by entering "Install-Module -Name Az.PrivateDns"'
                }
                else {
                    Import-Module -Name Az.PrivateDns
                }
                $ZoneName = $NetworkParameters["PrivateDnsZone"].split("/")[-1]
                $DnsResourceGroup = $NetworkParameters["PrivateDnsZone"].split("/")[4]
                $Links = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $ZoneName -ResourceGroupName $DnsResourceGroup
                $LinkedFlag = $false
                foreach($Link in $Links){
                    if ($Link.VirtualNetworkId -eq $VnetId){
                        $LinkedFlag = $true
                        break
                    }
                }
                if (!$LinkedFlag){
                    Write-Host "Adding virtual network link to the DNS zone..."
                    New-AzPrivateDnsVirtualNetworkLink -ZoneName $ZoneName -ResourceGroupName $DnsResourceGroup -Name $PSBoundParameters["Name"] -VirtualNetworkId $VnetId
                }
                $PSBoundParameters.NetworkPrivateDnsZoneResourceId = $NetworkParameters["PrivateDnsZone"]
                $null = $PSBoundParameters.Remove('PrivateDnsZone')
            }
            else{
                throw "To provision a server with private access, you need to provide private DNS zone."
            }
        }
        else{
            $RuleName, $StartIp, $EndIp = ParseFirewallRule $NetworkParameters.PublicAccess
        }

        $Msg = 'Creating MySQL server {0} in group {1}...' -f $PSBoundParameters.Name, $PSBoundParameters.resourceGroupName
        Write-Host $Msg
        $Msg = 'Your server {0} is using sku {1} (Paid Tier). Please refer to https://aka.ms/mysql-pricing for pricing details' -f $PSBoundParameters.Name, $PSBoundParameters.SkuName
        Write-Host $Msg
        $Server = Az.MySql.internal\New-AzMySqlFlexibleServer @PSBoundParameters

        # # Create Database
        $DatabaseParameter = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.Api20171201.Database]::new()
        $DatabaseParameter.Charset = "utf8"
        $DatabaseParameter.Collation = "utf8_general_ci"
        $Msg = 'Creating database {0}...' -f $DEFAULT_DB_NAME
        Write-Host $Msg
        $null = New-AzMySqlFlexibleServerDatabase -Name $DEFAULT_DB_NAME -ResourceGroupName $PSBoundParameters.ResourceGroupName -ServerName $PSBoundParameters.Name -Parameter $DatabaseParameter
        
        # Create Firewallrules
        if (![string]::IsNullOrEmpty($RuleName)) {
            $FirewallRuleName = CreateFirewallRule $RuleName $StartIp $EndIp $PSBoundParameters.ResourceGroupName $PSBoundParameters.Name
            $Server.FirewallRuleName = $FirewallRuleName
        }
        $Server.DatabaseName = $DEFAULT_DB_NAME
        $Server.SecuredPassword =  $PSBoundParameters.AdministratorLoginPassword

        return $Server

    } catch {
        throw
    }
}
}
function CreateNetworkResource($NetworkParameters) {
    [OutputType([hashtable])]
    $WarningPreference = 'silentlycontinue'
    
    if (!(Get-Module -ListAvailable -Name Az.Network)) {
        throw 'Please install Az.Network module by entering "Install-Module -Name Az.Network"'
    }
    else {
        Import-Module -Name Az.Network
    }

    # 1. Error Handling
    # Raise error when user passes values for both parameters
    if ($NetworkParameters.Containskey('Subnet') -And $NetworkParameters.ContainsKey('PublicAccess')) {
        throw "Incorrect usage : A combination of the parameters -Subnet and -PublicAccess is invalid. Use either one of them."
    }

    # # When address space parameters are passed, the only valid combination is : -Vnet -Subnet -VnetPrefix -SubnetPrefix
    if ($NetworkParameters.ContainsKey('Vnet') -Or $NetworkParameters.ContainsKey('Subnet')) {
        if (($NetworkParameters.ContainsKey('VnetPrefix') -And !$NetworkParameters.ContainsKey('SubnetPrefix')) -Or
            (!$NetworkParameters.ContainsKey('VnetPrefix') -And $NetworkParameters.ContainsKey('SubnetPrefix')) -Or 
            ($NetworkParameters.ContainsKey('VnetPrefix') -And $NetworkParameters.ContainsKey('SubnetPrefix') -And (!$NetworkParameters.ContainsKey('Vnet') -Or !$NetworkParameters.ContainsKey('Subnet')))){
                throw "Incorrect usage : -Vnet -Subnet -VnetPrefix -SubnetPrefix must be supplied together."
        }
    }
    
    #Handle Vnet, Subnet scenario
    # Only the Subnet ID provided.. 
    if (!$NetworkParameters.ContainsKey('Vnet') -And $NetworkParameters.ContainsKey('Subnet')) {
        if (IsValidSubnetId $NetworkParameters.Subnet) {
            Write-Host "You have supplied a subnet Id. Verifying its existence..."
            $ParsedResult = ParseResourceId $NetworkParameters.Subnet 
            $NetworkParameters.VnetName = $ParsedResult.VnetName
            $NetworkParameters.SubnetName = $ParsedResult.SubnetName
            $NetworkParameters.ResourceGroupName = $ParsedResult.ResourceGroupName
            $SubnetFlag = $true
            try { # Valid Subnet ID is provided
                $Subnet = Get-AzVirtualNetworkSubnetConfig -ResourceId $NetworkParameters.Subnet -ErrorAction Stop
            }
            catch { # Invalid subnet ID is provided, creating a new one.
                $SubnetFlag = $false
                Write-Host "The subnet doesn't exist. Creating the subnet"
                $Subnet = CreateVnetSubnet $NetworkParameters
            }

            if ($SubnetFlag){
                $Delegations = Get-AzDelegation -Subnet $Subnet
                if ($null -ne $Delegations){ # Valid but incorrect delegation
                    $Delegations | ForEach-Object {if ($PSItem.ServiceName -ne $DELEGATION_SERVICE_NAME) {
                        $Msg = "Can not use subnet with existing delegations other than {0}" -f $DELEGATION_SERVICE_NAME
                        throw $Msg
                    }}
                }
                else { # Valid but no delegation
                    $Vnet = Get-AzVirtualNetwork -ResourceGroupName $NetworkParameters.ResourceGroupName -Name $NetworkParameters.VnetName
                    $Subnet = Get-AzVirtualNetworkSubnetConfig -Name $NetworkParameters.SubnetName -VirtualNetwork $Vnet
                    $Subnet = Add-AzDelegation -Name $DELEGATION_SERVICE_NAME -ServiceName $DELEGATION_SERVICE_NAME -Subnet $Subnet
                    $Vnet | Set-AzVirtualNetwork
                }
            }
        }
        else {
            throw "The Subnet ID is not a valid form of resource id."
        }
    }
    elseif ($NetworkParameters.ContainsKey('Vnet') -And !$NetworkParameters.ContainsKey('Subnet')) {
        if (IsValidVnetId $NetworkParameters.Vnet){
            Write-Host "You have supplied a vnet Id. Verifying its existence..."
            IsValidRgLocation $NetworkParameters.Vnet $NetworkParameters
            $ParsedResult = ParseResourceId $NetworkParameters.Vnet 
            $NetworkParameters.VnetName = $ParsedResult.VnetName
            $NetworkParameters.SubnetName = 'Subnet' + $NetworkParameters.Name
            $Subnet = CreateVnetSubnet $NetworkParameters
        }
        elseif ($NetworkParameters.Vnet -Match $AZURE_ARMNAME) {
            Write-Host "You have supplied a vnet Name. Verifying its existence..."
            $NetworkParameters.VnetName = $NetworkParameters.Vnet
            $NetworkParameters.SubnetName = 'Subnet' + $NetworkParameters.Name
            $Subnet = CreateVnetSubnet $NetworkParameters
            IsValidRgLocation $Subnet.Id $NetworkParameters 
        }
        else {
            throw "Incorrectly formed Vnet id or Vnet name"
        }
    }
    else { # Both Vnet and Subnet provided
        if ($NetworkParameters.Vnet -Match $AZURE_ARMNAME -And $NetworkParameters.Subnet -Match $AZURE_ARMNAME) {
            $NetworkParameters.VnetName = $NetworkParameters.Vnet
            $NetworkParameters.SubnetName = $NetworkParameters.Subnet
            $Subnet = CreateVnetSubnet $NetworkParameters
        }
        else {
            if ($NetworkParameters.ContainsKey('SubnetPrefix') -And $NetworkParameters.ContainsKey('VnetPrefix')) {
                $Msg = "If you pass an address prefix, please consider passing a name (instead of Id) for a subnet or vnet."
            }
            else { $Msg = "If you pass both --vnet and --subnet, consider passing names instead of ids." }
            throw $Msg
        }
    }

    return $NetworkParameters
}

function GetSubnetId($ResourceGroupName, $VnetName, $SubnetName){
    if (!($ResourceGroupName -is [String])){ $ResourceGroupName = $ResourceGroupName[0]}
    $Vnet = Get-AzVirtualNetwork -Name $VnetName -ResourceGroupName $ResourceGroupName
    $Subnet = Get-AzVirtualNetworkSubnetConfig -Name $SubnetName -VirtualNetwork $Vnet
    return $Subnet.Id 
}

function CreateVnetSubnet($Parameters){
    if (!$Parameters.ContainsKey('SubnetPrefix')){$Parameters.SubnetPrefix = $DEFAULT_SUBNET_PREFIX}
    if (!$Parameters.ContainsKey('VnetPrefix')){$Parameters.VnetPrefix = $DEFAULT_VNET_PREFIX}

    try {
        $Vnet = Get-AzVirtualNetwork -Name $Parameters.VnetName -ResourceGroupName $Parameters.ResourceGroupName -ErrorAction Stop
        $prefixes = $Vnet.AddressSpace.AddressPrefixes
        if (!($prefixes -Contains $Parameters.VnetPrefix)){
            $prefixes.Add($Parameters.VnetPrefix)
            $Vnet.AddressSpace.AddressPrefixes = $prefixes
            $Vnet | Set-AzVirtualNetwork
        }
    }
    catch {
        $Msg = "Creating new vnet {0} in resource group {1}" -f $Parameters.VnetName, $Parameters.ResourceGroupName
        Write-Host $Msg
        if($PSCmdlet.ShouldProcess($Parameters.VnetName)) {
            New-AzVirtualNetwork -Name $Parameters.VnetName -ResourceGroupName $Parameters.ResourceGroupName -Location $Parameters.Location -AddressPrefix $Parameters.VnetPrefix -Force
        }
    }

    $Subnet = CreateAndDelegateSubnet $Parameters
    
    return $Subnet
}
function CreateAndDelegateSubnet($Parameters) {
    $SubnetFlag = $true
    $Vnet = Get-AzVirtualNetwork -Name $Parameters.VnetName -ResourceGroupName $Parameters.ResourceGroupName -ErrorAction Stop
    try {
        $Subnet = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $Vnet -Name $Parameters.SubnetName -ErrorAction Stop
    }
    catch {
        $SubnetFlag = $false
        $Msg = 'Creating new subnet {0} in resource group {1} and delegating it to {2}' -f $Parameters.SubnetName, $Parameters.ResourceGroupName, $DELEGATION_SERVICE_NAME
        Write-Host $Msg
    }

    if (!$SubnetFlag) {
        $Delegation = New-AzDelegation -Name $DELEGATION_SERVICE_NAME -ServiceName $DELEGATION_SERVICE_NAME
        Add-AzVirtualNetworkSubnetConfig -Name $Parameters.SubnetName -VirtualNetwork $Vnet -AddressPrefix $Parameters.SubnetPrefix -Delegation $Delegation | Set-AzVirtualNetwork
    }
    else { # check if existing subnet is delegated
        $Delegations = Get-AzDelegation -Subnet $Subnet
        if ($null -ne $Delegations){
            $Delegations | ForEach-Object {If ($PSItem.ServiceName -ne $DELEGATION_SERVICE_NAME) {
                $Msg = "Can not use subnet with existing delegations other than {0}" -f $DELEGATION_SERVICE_NAME
                throw $Msg
            }}
        }
        else { # Valid but no delegation
            $Subnet = Add-AzDelegation -Name $DELEGATION_SERVICE_NAME -ServiceName $DELEGATION_SERVICE_NAME -Subnet $Subnet
            $Vnet | Set-AzVirtualNetwork
        }
    }

    return $Subnet
}
function CreateFirewallRule($RuleName, $StartIp, $EndIp, $ResourceGroupName, $ServerName) {
    $FirewallRule = New-AzMySqlFlexibleServerFirewallRule -Name $RuleName -ResourceGroupName $ResourceGroupName -ServerName $ServerName -EndIPAddress $EndIp -StartIPAddress $StartIp
    return $FirewallRule.Name 
}

function ParseFirewallRule($PublicAccess){
    $PublicAccess = [string]$PublicAccess
    if ([string]::IsNullOrEmpty($PublicAccess)) {
        $PublicAccess = 'none'
    }
    if ($PublicAccess.ToLower() -ne 'none') {
        $Date = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
        if ($PublicAccess.ToLower() -eq 'all'){
            $StartIp = '0.0.0.0' 
            $EndIp = '255.255.255.255'
            $RuleName = "AllowAll_" + $Date 
        }
        else {
            $Parsed = $PublicAccess -split "-"
            if ($Parsed.length -eq 1) {
                $StartIp = $Parsed[0]
                $EndIp = $Parsed[0]
            }
            elseif ($Parsed.length -eq 2) {
                $StartIp = $Parsed[0]
                $EndIp = $Parsed[1]
            }
            else { throw "Incorrect usage: --public-access. Acceptable values are \'all\', \'none\',\'<startIP>\' and \'<startIP>-<destinationIP>\' where startIP and destinationIP ranges from 0.0.0.0 to 255.255.255.255" }
            if ($StartIp -eq '0.0.0.0' -And $EndIp -eq '0.0.0.0') {
                $RuleName = "AllowAllAzureServicesAndResourcesWithinAzureIps_" + $Date
                $Msg = 'Configuring server firewall rule to accept connections from all Azure resources...'
            }
            elseif ($StartIP -eq $EndIP) {
                $Msg = 'Configuring server firewall rule to accept connections from ' + $StartIP 
                $RuleName = "FirewallIPAddress_" + $Date
            } 
            else {
                $Msg = 'Configuring server firewall rule to accept connections from {0} to {1}' -f $StartIP, $EndIp
                $RuleName = "FirewallIPAddress_" + $Date
            }
            Write-Host $Msg
        }
    }
    else{
        $StartIp = $null
        $EndIp = $null
        $RuleName = $null
    }
    return $RuleName, $StartIp, $EndIp
}
function IsValidVnetId($Rid){
    $VnetFormat = "\/subscriptions\/[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}\/resourceGroups\/[-\w\._\(\)]+\/providers\/Microsoft.Network\/virtualNetworks\/[^<>%&:\\?/]{1,260}$"
    if ( $Rid -match $VnetFormat ) {
        return $True
    }
    return $False
}
function IsValidSubnetId($Rid){
    $SubnetFormat = "\/subscriptions\/[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}\/resourceGroups/[-\w\._\(\)]+\/providers\/Microsoft.Network\/virtualNetworks\/[^<>%&:\\?/]{1,260}\/subnets\/[^<>%&:\\?/]{1,260}$"
    if ( $Rid -match $SubnetFormat ) {
        return $True
    }
    return $False
}
function ParseResourceId($Rid){
    $Splits = $Rid -split "/"
    $ParsedResults = @{}
    if ($Splits.length -gt 1){
        $ParsedResults["SubscriptionId"] = $Splits[2]
        $ParsedResults["ResourceGroupName"] = $Splits[4]
        $ParsedResults["VnetName"] = $Splits[8]
        if ($Splits.length -eq 11) {
            $ParsedResults["SubnetName"] = $Splits[10]
        }
    }
    return $ParsedResults
}
function IsValidRgLocation($ResourceId, $Parameters){
    $ParsedResults = ParseResourceId $ResourceId
    $Group = Get-AzResourceGroup -Name $ParsedResults["ResourceGroupName"]
    $ParsedResults["Location"] = $Group.Location

    if ($Parameters.SubscriptionId -eq $ParsedResults.SubscriptionId -And $Parameters.Location -eq $ParsedResults.Location) {
        return $True
    }
    throw "Incorrect Usage : The location and subscription of the server, Vnet and Subnet should be same."
}

function Get-RandomNumbers($Prefix, $Length) {
    $Generated = ""
    for($i = 0; $i -lt $Length; $i++){ $Generated += Get-Random -Maximum 10 }
    return $Prefix + $Generated
}

function Get-RandomName() {
    $Noun = Get-Content -Path (Join-Path $PSScriptRoot ".\nouns.txt") | Get-Random
    $Adjective = Get-Content -Path (Join-Path $PSScriptRoot ".\adjectives.txt") | Get-Random
    $Number = Get-Random -Maximum 10
    $RandomName =  $Adjective + $Noun + $Number
    return $RandomName

}

function Get-GeneratePassword() {
    $Password = ''
    $Chars = 'abcdefghiklmnoprstuvwxyzABCDEFGHKLMNOPRSTUVWXYZ1234567890'
    for ($i = 0; $i -lt 16; $i++ ) { $Password += $Chars[(Get-Random -Minimum 0 -Maximum $Chars.Length)] }
    $Password = ($Password -split '' | Sort-Object {Get-Random}) -join ''
    return $Password
}

# SIG # Begin signature block
# MIIoPAYJKoZIhvcNAQcCoIIoLTCCKCkCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBrw0MAnwk/INIq
# jC62wAhB3nQL6UE80z31JfwRUnKGdaCCDYUwggYDMIID66ADAgECAhMzAAAEhJji
# EuB4ozFdAAAAAASEMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjUwNjE5MTgyMTM1WhcNMjYwNjE3MTgyMTM1WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDtekqMKDnzfsyc1T1QpHfFtr+rkir8ldzLPKmMXbRDouVXAsvBfd6E82tPj4Yz
# aSluGDQoX3NpMKooKeVFjjNRq37yyT/h1QTLMB8dpmsZ/70UM+U/sYxvt1PWWxLj
# MNIXqzB8PjG6i7H2YFgk4YOhfGSekvnzW13dLAtfjD0wiwREPvCNlilRz7XoFde5
# KO01eFiWeteh48qUOqUaAkIznC4XB3sFd1LWUmupXHK05QfJSmnei9qZJBYTt8Zh
# ArGDh7nQn+Y1jOA3oBiCUJ4n1CMaWdDhrgdMuu026oWAbfC3prqkUn8LWp28H+2S
# LetNG5KQZZwvy3Zcn7+PQGl5AgMBAAGjggGCMIIBfjAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUBN/0b6Fh6nMdE4FAxYG9kWCpbYUw
# VAYDVR0RBE0wS6RJMEcxLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
# dGlvbnMgTGltaXRlZDEWMBQGA1UEBRMNMjMwMDEyKzUwNTM2MjAfBgNVHSMEGDAW
# gBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
# d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIw
# MTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDov
# L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDEx
# XzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIB
# AGLQps1XU4RTcoDIDLP6QG3NnRE3p/WSMp61Cs8Z+JUv3xJWGtBzYmCINmHVFv6i
# 8pYF/e79FNK6P1oKjduxqHSicBdg8Mj0k8kDFA/0eU26bPBRQUIaiWrhsDOrXWdL
# m7Zmu516oQoUWcINs4jBfjDEVV4bmgQYfe+4/MUJwQJ9h6mfE+kcCP4HlP4ChIQB
# UHoSymakcTBvZw+Qst7sbdt5KnQKkSEN01CzPG1awClCI6zLKf/vKIwnqHw/+Wvc
# Ar7gwKlWNmLwTNi807r9rWsXQep1Q8YMkIuGmZ0a1qCd3GuOkSRznz2/0ojeZVYh
# ZyohCQi1Bs+xfRkv/fy0HfV3mNyO22dFUvHzBZgqE5FbGjmUnrSr1x8lCrK+s4A+
# bOGp2IejOphWoZEPGOco/HEznZ5Lk6w6W+E2Jy3PHoFE0Y8TtkSE4/80Y2lBJhLj
# 27d8ueJ8IdQhSpL/WzTjjnuYH7Dx5o9pWdIGSaFNYuSqOYxrVW7N4AEQVRDZeqDc
# fqPG3O6r5SNsxXbd71DCIQURtUKss53ON+vrlV0rjiKBIdwvMNLQ9zK0jy77owDy
# XXoYkQxakN2uFIBO1UNAvCYXjs4rw3SRmBX9qiZ5ENxcn/pLMkiyb68QdwHUXz+1
# fI6ea3/jjpNPz6Dlc/RMcXIWeMMkhup/XEbwu73U+uz/MIIHejCCBWKgAwIBAgIK
# YQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlm
# aWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
# OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
# BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYD
# VQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
# 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+la
# UKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc
# 6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4D
# dato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+
# lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nk
# kDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6
# A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmd
# X4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
# 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zd
# sGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3
# T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
# 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRI
# bmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAL
# BgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBD
# uRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jv
# c29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
# BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1h
# cnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkA
# YwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
# 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7
# v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0b
# pdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/
# KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvy
# CInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBp
# mLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJi
# hsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYb
# BL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
# oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sL
# gOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtX
# cVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCGg0wghoJAgEBMIGVMH4x
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01p
# Y3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAASEmOIS4HijMV0AAAAA
# BIQwDQYJYIZIAWUDBAIBBQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
# HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIDT2
# rLP5tNPsM14AyZhAFFCFcHlb4sY8NdwkKUlUFUVMMEIGCisGAQQBgjcCAQwxNDAy
# oBSAEgBNAGkAYwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20wDQYJKoZIhvcNAQEBBQAEggEAgGp2iJyJslRATHN4zW6zeB5GoUfR3VOFo+Gn
# JGsvN8ZldKaydX25Ifmq2oz28k4OFEwqiUv26rjZlOHMumES/ojg9AOUvtN+0XGl
# myJyD77OKYNPVfWNpaqbB79j4QXIDfnhsPWZLO2PHzkyVjl4cST3/jSCrjp6PW4v
# iXKPDJlL97RXjhwiay9gtYyogB+mB7SGJEfsUcVbmg3khfNtajX3W9+AaZCzA1Yq
# b5aI0P7bnU7IjVXd+wnmguC8AZzYv/guUPgVXlRzPHWPd7FSVSTxirqCmKnx5E3f
# Z6npEBWdj1wz0u9ncU0kzZpY5FAX2TOhBRK4XzziaJzfwmKrIaGCF5cwgheTBgor
# BgEEAYI3AwMBMYIXgzCCF38GCSqGSIb3DQEHAqCCF3AwghdsAgEDMQ8wDQYJYIZI
# AWUDBAIBBQAwggFSBgsqhkiG9w0BCRABBKCCAUEEggE9MIIBOQIBAQYKKwYBBAGE
# WQoDATAxMA0GCWCGSAFlAwQCAQUABCADYZsQmqxndr0OSDdlvRNOt6f4vV3yymkp
# nEgehILvdAIGaF2urkpHGBMyMDI1MDczMDAzNTEyMy43MzJaMASAAgH0oIHRpIHO
# MIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQL
# ExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxk
# IFRTUyBFU046OEQwMC0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1l
# LVN0YW1wIFNlcnZpY2WgghHtMIIHIDCCBQigAwIBAgITMwAAAg0Nd757No9/4wAB
# AAACDTANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
# MDAeFw0yNTAxMzAxOTQzMDFaFw0yNjA0MjIxOTQzMDFaMIHLMQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1l
# cmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046OEQwMC0w
# NUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Uw
# ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCxf6gH3fH3wgmFN5TV8zRF
# /N0TJguWUYCrQZPUmwA+QhSySNp7kiGmFZd4b5zsAfN0Wh+PzIJvYsVMgVCaZcbV
# r/DJBfexwnQfc+fgIjOiAzYSjg7EtSOdWoLk81b/mGiGIBC++fLcSAzbZO3KtW4P
# RKOSsdD/5eRdtNca/Ed4EAcUT32zAGS9Sq//4kDT92KEzRNXJj8z3NDL4oGGzCQM
# vA83tQG5mrnepxF0OsNfKKHYHMqjyOEP5pTgKfT5XMfz0sEG6ARAjlXJ79SG/joe
# uHh8TqC+cJMry9wB7ZLrdMAFy8rHN3W1+kkpw47Ko+9ize2ble+P5jMaqufK033B
# u+2FXVSKphil2j0qBUWpn5vBtf2W+gsVqydA+eseBHfYxcDZ4+5oRoyDAg0tW9f7
# 9vOAv91P4bTzG+BZPBbDMzSDwmj8ASKDlVwruTeF1em7NWiedWAB+29gFH/c/NN1
# uTQLvwGDIOw1DcLnCD0VXNL7mOvifYvNWugTAHcMFLVlA1jeOH35E/IW9qcKKqra
# h7LyJax/6M5UHswQugGgLriiMNEvz3IqW+AiIJ097iYzMGzsDqbLSUztIjDEt9xf
# IHHUs/p3j9Bkr2bPP1v4z8vp/45Ck3mfFbW2F0EtjOCnGPMrJNjjGhEG9zAK1105
# Bg2kJ7Rn8WTWO5IbD/rDtQIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFBWXjpDmDgNr
# TsISj26SjU1/YMOAMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8G
# A1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMv
# Y3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBs
# BggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0
# LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUy
# MDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUH
# AwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQAcH8gT42wVQ8GQ
# Z+MHIXNJ+d4dQn0+vPG/AdFvTxk/tvOOkA2i7hnoEOEFcSbzS5EdIVCMi5Y5EiWT
# 8hEJkztdeq5hXtUWsPY+2lYSU9HdhKDfRDfjwVZ9kfCthrLRC3jw9Fah5MAGI9MH
# SETo9r7+cux8AUqQ3hmaM2jmTNWvrFOLbO01B1ciNGbvE2xK+rbzBBh/uWd3k30p
# au6Lp0azg7rDYGMGv8jWotILfpKMBeCQoufMsI/gzxo4+k9dqYBkAwMk7h1hf23y
# cb5WngSMQV/Uxl3Sxbg+64KK6GCsTSG6z7zNTgbL69PMGfwV2cnawY95Iy2cgJ6c
# bMORRUcYzvsuUd8oEQ87cW4XqqBLrheewJjROT6YyWrQ2oQ+jzGK2WJoGNnfanmN
# fqQnVKpi320onag95LMFjj8BwrflYsO9kEOiy7I5UngPBmF+RHSCv2hFSr8nK7gt
# uiy9SUOKP6FbQOzyMRvJ3UxsmrH38477XzETb/tZLAj10TdYFfkjkFeFjlb3iMTS
# s/VrJSF0r0vON/oxZqKCY8WZez+uQP0Try0QQ9wRp5D2FYJ8E1uIX/LvwuFkBdWf
# 7X7qlb+pzdvPpSAcaCgBIWTlMn2bWgkU5uPzxRPHh/0u+FI7/eRCZGbLM2qnn3yX
# QvO/h9wQm8pIABRAvodaiV0bVmHbETCCB3EwggVZoAMCAQICEzMAAAAVxedrngKb
# SZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
# EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
# ZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj
# YXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
# NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
# B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
# AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEB
# AQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXI
# yjVX9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjo
# YH1qUoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1y
# aa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v
# 3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1oO5pG
# ve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg3viS
# kR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYr
# bqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
# jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSL
# W6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AF
# emzFER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIu
# rQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIE
# FgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWn
# G1M1GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEW
# M2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5
# Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBi
# AEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV
# 9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3Js
# Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
# MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8v
# d3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2
# LTIzLmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv
# 6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZn
# OlNN3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1
# bSNU5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4
# rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU
# 6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCrdTDF
# NLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/
# HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdU
# CbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
# excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTm
# dHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZq
# ELQdVTNYs6FwZvKhggNQMIICOAIBATCB+aGB0aSBzjCByzELMAkGA1UEBhMCVVMx
# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJp
# Y2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNOOjhEMDAtMDVF
# MC1EOTQ3MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMK
# AQEwBwYFKw4DAhoDFQB7LCwoj6G3nQ7Oxhl/pfne4yATPaCBgzCBgKR+MHwxCzAJ
# BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
# MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
# c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBCwUAAgUA7DOrvzAi
# GA8yMDI1MDcyOTIwMjExOVoYDzIwMjUwNzMwMjAyMTE5WjB3MD0GCisGAQQBhFkK
# BAExLzAtMAoCBQDsM6u/AgEAMAoCAQACAh5KAgH/MAcCAQACAhL/MAoCBQDsNP0/
# AgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSCh
# CjAIAgEAAgMBhqAwDQYJKoZIhvcNAQELBQADggEBAHnrcDZqUSqgcuoFjmVPtX6k
# 6ExlERqEMEbLx0sCMs0M1kN6hnXiqeS/lfVt7iEp8r5MJj/Qf67d3SngCbctwiKA
# XnugvNhsOMWkyh7u1JU3Q/W6cSF6iQqLXYJyPZ0PdPQJ13Nh2uV5TBNDS39j3rHi
# UruXOtKcxDy2yV+zL5iop58Xi+i4zjqSdYPtglVTEIfCJTbfm6PRLvKQtEsbONxv
# sgvgpDJAfL332pol2xQf36baRw9bDiah+ggcdW3Hr+IiHPW5xkARiQOyEA7+Oz9K
# cVBmQNcvxH4VHKXMgdLJ+EmIHWt48vj0rEhUvk9gz2McoU325VC5SvjSuSi0BsAx
# ggQNMIIECQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
# bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
# aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAA
# Ag0Nd757No9/4wABAAACDTANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkD
# MQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCAOPegv4DZps9f2mlNS327F
# NK1Oc7plpj7b/lRxYlRgATCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EIGPq
# B5TsJGqI8OuknBKtSvb0Ffq6w5NSs5veTVwka/hAMIGYMIGApH4wfDELMAkGA1UE
# BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
# BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
# IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAINDXe+ezaPf+MAAQAAAg0wIgQgHw2/
# SsuiOcP7ZKs+TqrsI76aod3gQckNtJMa+WfpXjIwDQYJKoZIhvcNAQELBQAEggIA
# daWnfeun20UoWPQ7f7iaV+CYvb4oh6DS1Jvgn5r12w2XDkOQKFRlS4rq7bnLAWrB
# yBhGZv9FpFN76HM7wPEYTDOpsL2ua+MolTypm2D+ra253oULlY6QB7T0HS0dcvLo
# uFyKQgF0+XBts67Uf6oi9zICBIcNm2ESJFUCRp8DbBBFs9kyGajIjPlVrR53vFy3
# jIufK2dCHvODSbChqZfbryAc/jbIzOqFHNVL5T3R9TJuTrBWYl7thyby/D60w5sY
# eTIpR0w/+BGYngvyK9g2+rlXM/SIZc6WXX9hzeeFfyoDcR0wTC9XTw+UkDqlpOLp
# UUvBekxsXpZQTY+SkQB1/gGJmE7PCDIakS0MTUwTcjVfmr2gLmNWSAgfGYTsaRLC
# PJbzmpr8cw04JGOSbTsEFO1z2oL98XiyPt7nXLQNBTLSzsTLEZy4UnhQ+hCeO51W
# BWtOwFqrG0u//QC8bmnnqJtdaBNhWmDTXp00jbNb7kRHa7KFRUSh3LA7KA0dwN8v
# yfOprmalwHxrp7kcBkxqZYg2HIayiE3vaK7mHBlZ5i2ToMaKS4qdRz0q4x0lLHtf
# MOrAosVvHLPPPg5yTLmrnn7ZA7QQboELATgV2uSQOS0PX+TZ3JNPQEmABoivY+tU
# NsVqlzGXVvDaaxJxW7EU+qpXLSJPnKyLJ+Q/czfAq0I=
# SIG # End signature block
