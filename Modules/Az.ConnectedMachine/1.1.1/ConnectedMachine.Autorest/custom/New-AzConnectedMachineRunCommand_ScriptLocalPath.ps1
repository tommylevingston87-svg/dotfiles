# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

# comment out for stable release
# function New-AzConnectedMachineRunCommand_ScriptLocalPath {
#     [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IMachineRunCommand])]
#     [CmdletBinding(PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
#     param(
#         [Parameter(Mandatory)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Path')]
#         [System.String]
#         # The name of the hybrid machine.
#         ${MachineName},

#         [Parameter(Mandatory)]
#         [ArgumentCompleter({ Get-AzResourceGroup | Select-Object -ExpandProperty ResourceGroupName })]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Path')]
#         [System.String]
#         # The name of the resource group.
#         # The name is case insensitive.
#         ${ResourceGroupName},

#         [Parameter(Mandatory)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Path')]
#         [System.String]
#         # The name of the run command.
#         ${RunCommandName},

#         [Parameter(Mandatory)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Path')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
#         [System.String]
#         # The ID of the target subscription.
#         ${SubscriptionId},

#         [Parameter(Mandatory)]
#         [ArgumentCompleter({ Get-AzLocation | Where-Object Providers -Contains "Microsoft.HybridCompute" | Select-Object -ExpandProperty Location })]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # The geo-location where the resource lives
#         ${Location},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.Management.Automation.SwitchParameter]
#         # Optional.
#         # If set to true, provisioning will complete as soon as script starts and will not wait for script to complete.
#         ${AsyncExecution},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Client Id (GUID value) of the user-assigned managed identity.
#         # ObjectId should not be used if this is provided.
#         ${ErrorBlobManagedIdentityClientId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Object Id (GUID value) of the user-assigned managed identity.
#         # ClientId should not be used if this is provided.
#         ${ErrorBlobManagedIdentityObjectId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the Azure storage blob where script error stream will be uploaded.
#         # Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.
#         # Refer errorBlobManagedIdentity parameter.
#         ${ErrorBlobUri},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Client Id (GUID value) of the user-assigned managed identity.
#         # ObjectId should not be used if this is provided.
#         ${OutputBlobManagedIdentityClientId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Object Id (GUID value) of the user-assigned managed identity.
#         # ClientId should not be used if this is provided.
#         ${OutputBlobManagedIdentityObjectId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the Azure storage blob where script output stream will be uploaded.
#         # Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.
#         # Refer outputBlobManagedIdentity parameter.
#         ${OutputBlobUri},

#         [Parameter()]
#         [AllowEmptyCollection()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IRunCommandInputParameter[]]
#         # The parameters used by the script.
#         # To construct, see NOTES section for PARAMETER properties and create a hash table.
#         ${Parameter},

#         [Parameter()]
#         [AllowEmptyCollection()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IRunCommandInputParameter[]]
#         # The parameters used by the script.
#         # To construct, see NOTES section for PROTECTEDPARAMETER properties and create a hash table.
#         ${ProtectedParameter},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the user account password on the machine when executing the run command.
#         ${RunAsPassword},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the user account on the machine when executing the run command.
#         ${RunAsUser},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Client Id (GUID value) of the user-assigned managed identity.
#         # ObjectId should not be used if this is provided.
#         ${ScriptUriManagedIdentityClientId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Object Id (GUID value) of the user-assigned managed identity.
#         # ClientId should not be used if this is provided.
#         ${ScriptUriManagedIdentityObjectId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the commandId of predefined built-in script.
#         ${SourceCommandId},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the script content to be executed on the machine.
#         ${SourceScript},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the script download location.
#         # It can be either SAS URI of an Azure storage blob with read access or public URI.
#         ${SourceScriptUri},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.String]
#         # Specifies the commandId of predefined built-in script.
#         ${ScriptLocalPath},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ITrackedResourceTags]))]
#         [System.Collections.Hashtable]
#         # Resource tags.
#         ${Tag},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Body')]
#         [System.Int32]
#         # The timeout in seconds to execute the run command.
#         ${TimeoutInSecond},

#         [Parameter()]
#         [Alias('AzureRMContext', 'AzureCredential')]
#         [ValidateNotNull()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Azure')]
#         [System.Management.Automation.PSObject]
#         # The DefaultProfile parameter is not functional.
#         # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
#         ${DefaultProfile},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Management.Automation.SwitchParameter]
#         # Run the command as a job
#         ${AsJob},

#         [Parameter(DontShow)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Management.Automation.SwitchParameter]
#         # Wait for .NET debugger to attach
#         ${Break},

#         [Parameter(DontShow)]
#         [ValidateNotNull()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.SendAsyncStep[]]
#         # SendAsync Pipeline Steps to be appended to the front of the pipeline
#         ${HttpPipelineAppend},

#         [Parameter(DontShow)]
#         [ValidateNotNull()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.SendAsyncStep[]]
#         # SendAsync Pipeline Steps to be prepended to the front of the pipeline
#         ${HttpPipelinePrepend},

#         [Parameter()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Management.Automation.SwitchParameter]
#         # Run the command asynchronously
#         ${NoWait},

#         [Parameter(DontShow)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Uri]
#         # The URI for the proxy server to use
#         ${Proxy},

#         [Parameter(DontShow)]
#         [ValidateNotNull()]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Management.Automation.PSCredential]
#         # Credentials for a proxy server to use for the remote call
#         ${ProxyCredential},

#         [Parameter(DontShow)]
#         [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Category('Runtime')]
#         [System.Management.Automation.SwitchParameter]
#         # Use the default credentials for the proxy
#         ${ProxyUseDefaultCredentials}
#     )

#     process {
#         if ($PSBoundParameters.ContainsKey("ScriptLocalPath"))
#         {
#             # Read Local File and add 
#             $script = ""
#             if ((Get-ChildItem $scriptLocalPath | Select-Object Extension).Extension -eq ".sh"){
#                 foreach ($line in Get-Content -Path $scriptLocalPath){
#                     $words = $line.trim().split()
#                     $commentFound = $false
#                     foreach ($word in $words){
#                         if ($word[0] -eq "#" -and $commentFound -eq $false){
#                             $commentFound = $true
#                             $script += "``" + $word + " "
#                         }
#                         else{
#                             $script += $word + " "
#                         }
#                     }
#                     $script = $script.trim()
#                     #close 
#                     if ($commentFound){
#                     $script += "``"
#                     }
#                     $script += ";"
#                 }
#             }
#             else{
#                 foreach ($line in Get-Content -Path $scriptLocalPath){
#                     $words = $line.trim().split()
#                     $commentFound = $false
#                     foreach ($word in $words){
#                         if ($word[0] -eq "#" -and $commentFound -eq $false){
#                             $commentFound = $true
#                             $script += "<" + $word + " "
#                         }
#                         else{
#                             $script += $word + " "
#                         }
#                     }
#                     $script = $script.trim()
#                     #close 
#                     if ($commentFound){
#                         $script += "#>"
#                     }
#                     $script += ";"
#                 }
#             }
            
#             $PSBoundParameters.Add("SourceScript", $script)
#             # If necessary, remove the -ParameterA parameter from the dictionary of bound parameters
#             $null = $PSBoundParameters.Remove("ScriptLocalPath")
#         }
#         Az.ConnectedMachine\New-AzConnectedMachineRunCommand @PSBoundParameters
#     }
# }
# SIG # Begin signature block
# MIIoOQYJKoZIhvcNAQcCoIIoKjCCKCYCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCClUUkh4T8Sgs16
# 7ggEodDFw1C7Dm1ra7kBCALErpVRE6CCDYUwggYDMIID66ADAgECAhMzAAAEA73V
# lV0POxitAAAAAAQDMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjQwOTEyMjAxMTEzWhcNMjUwOTExMjAxMTEzWjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQCfdGddwIOnbRYUyg03O3iz19XXZPmuhEmW/5uyEN+8mgxl+HJGeLGBR8YButGV
# LVK38RxcVcPYyFGQXcKcxgih4w4y4zJi3GvawLYHlsNExQwz+v0jgY/aejBS2EJY
# oUhLVE+UzRihV8ooxoftsmKLb2xb7BoFS6UAo3Zz4afnOdqI7FGoi7g4vx/0MIdi
# kwTn5N56TdIv3mwfkZCFmrsKpN0zR8HD8WYsvH3xKkG7u/xdqmhPPqMmnI2jOFw/
# /n2aL8W7i1Pasja8PnRXH/QaVH0M1nanL+LI9TsMb/enWfXOW65Gne5cqMN9Uofv
# ENtdwwEmJ3bZrcI9u4LZAkujAgMBAAGjggGCMIIBfjAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQU6m4qAkpz4641iK2irF8eWsSBcBkw
# VAYDVR0RBE0wS6RJMEcxLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
# dGlvbnMgTGltaXRlZDEWMBQGA1UEBRMNMjMwMDEyKzUwMjkyNjAfBgNVHSMEGDAW
# gBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
# d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIw
# MTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDov
# L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDEx
# XzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIB
# AFFo/6E4LX51IqFuoKvUsi80QytGI5ASQ9zsPpBa0z78hutiJd6w154JkcIx/f7r
# EBK4NhD4DIFNfRiVdI7EacEs7OAS6QHF7Nt+eFRNOTtgHb9PExRy4EI/jnMwzQJV
# NokTxu2WgHr/fBsWs6G9AcIgvHjWNN3qRSrhsgEdqHc0bRDUf8UILAdEZOMBvKLC
# rmf+kJPEvPldgK7hFO/L9kmcVe67BnKejDKO73Sa56AJOhM7CkeATrJFxO9GLXos
# oKvrwBvynxAg18W+pagTAkJefzneuWSmniTurPCUE2JnvW7DalvONDOtG01sIVAB
# +ahO2wcUPa2Zm9AiDVBWTMz9XUoKMcvngi2oqbsDLhbK+pYrRUgRpNt0y1sxZsXO
# raGRF8lM2cWvtEkV5UL+TQM1ppv5unDHkW8JS+QnfPbB8dZVRyRmMQ4aY/tx5x5+
# sX6semJ//FbiclSMxSI+zINu1jYerdUwuCi+P6p7SmQmClhDM+6Q+btE2FtpsU0W
# +r6RdYFf/P+nK6j2otl9Nvr3tWLu+WXmz8MGM+18ynJ+lYbSmFWcAj7SYziAfT0s
# IwlQRFkyC71tsIZUhBHtxPliGUu362lIO0Lpe0DOrg8lspnEWOkHnCT5JEnWCbzu
# iVt8RX1IV07uIveNZuOBWLVCzWJjEGa+HhaEtavjy6i7MIIHejCCBWKgAwIBAgIK
# YQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlm
# aWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
# OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
# BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYD
# VQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
# 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+la
# UKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc
# 6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4D
# dato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+
# lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nk
# kDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6
# A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmd
# X4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
# 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zd
# sGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3
# T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
# 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRI
# bmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAL
# BgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBD
# uRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jv
# c29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFf
# MDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
# BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1h
# cnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkA
# YwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
# 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7
# v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0b
# pdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/
# KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvy
# CInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBp
# mLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJi
# hsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYb
# BL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
# oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sL
# gOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtX
# cVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCGgowghoGAgEBMIGVMH4x
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01p
# Y3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAAQDvdWVXQ87GK0AAAAA
# BAMwDQYJYIZIAWUDBAIBBQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
# HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIDYI
# nVpSWBQVLcmSnVG/Ns9s7y0Zbj6T6SSfJuFrxUH1MEIGCisGAQQBgjcCAQwxNDAy
# oBSAEgBNAGkAYwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20wDQYJKoZIhvcNAQEBBQAEggEAJlLzVTA3Buimzit8XOR+6YCb3fn/wlz5tbcd
# ry20Aq3Yy88gKCFx7bmfNuViHB6be9IzBjuGk6gKNpdcfWV3tr7JjHl5qKbQwm41
# 47R84X+awC+7GzDLzKg4xDUkyXkPhLoUW5+F/APrO6+ze2e2Djg99y20PeKRYQ6r
# DL74X3dODnxxcqVVdybxFdFOBLY9MoHyMQha4uoCm0CmVxqsrNDCkSdgR5XPqT2N
# 0bJr/3aYiFj72dIzHPGV8FWQQO98rpNCBMwcdnLLhd8yAE1rSRfYQY1dUpiV6OwE
# pKE1zUcOrXKACmREBvAVyK9jFIjnvGI3ociQNGQh+KkEZmmFX6GCF5QwgheQBgor
# BgEEAYI3AwMBMYIXgDCCF3wGCSqGSIb3DQEHAqCCF20wghdpAgEDMQ8wDQYJYIZI
# AWUDBAIBBQAwggFSBgsqhkiG9w0BCRABBKCCAUEEggE9MIIBOQIBAQYKKwYBBAGE
# WQoDATAxMA0GCWCGSAFlAwQCAQUABCDLNNwl8UpJzNGhtraN1tBwf023/WIRuJX5
# VicR6oo6IgIGZ1rLfdPGGBMyMDI1MDEwOTA2MzY0OS4wNTNaMASAAgH0oIHRpIHO
# MIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQL
# ExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxk
# IFRTUyBFU046QTkzNS0wM0UwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1l
# LVN0YW1wIFNlcnZpY2WgghHqMIIHIDCCBQigAwIBAgITMwAAAekPcTB+XfESNgAB
# AAAB6TANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
# MDAeFw0yMzEyMDYxODQ1MjZaFw0yNTAzMDUxODQ1MjZaMIHLMQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1l
# cmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046QTkzNS0w
# M0UwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Uw
# ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCsmowxQRVgp4TSc3nTa6yr
# APJnV6A7aZYnTw/yx90u1DSH89nvfQNzb+5fmBK8ppH76TmJzjHUcImd845A/pvZ
# Y5O8PCBu7Gq+x5Xe6plQt4xwVUUcQITxklOZ1Rm9fJ5nh8gnxOxaezFMM41sDI7L
# MpKwIKQMwXDctYKvCyQy6kO2sVLB62kF892ZwcYpiIVx3LT1LPdMt1IeS35KY5Mx
# ylRdTS7E1Jocl30NgcBiJfqnMce05eEipIsTO4DIn//TtP1Rx57VXfvCO8NSCh9d
# xsyvng0lUVY+urq/G8QRFoOl/7oOI0Rf8Qg+3hyYayHsI9wtvDHGnT30Nr41xzTp
# w2I6ZWaIhPwMu5DvdkEGzV7vYT3tb9tTviY3psul1T5D938/AfNLqanVCJtP4yz0
# VJBSGV+h66ZcaUJOxpbSIjImaOLF18NOjmf1nwDatsBouXWXFK7E5S0VLRyoTqDC
# xHG4mW3mpNQopM/U1WJnjssWQluK8eb+MDKlk9E/hOBYKs2KfeQ4HG7dOcK+wMOa
# mGfwvkIe7dkylzm8BeAUQC8LxrAQykhSHy+FaQ93DAlfQYowYDtzGXqE6wOATeKF
# I30u9YlxDTzAuLDK073cndMV4qaD3euXA6xUNCozg7rihiHUaM43Amb9EGuRl022
# +yPwclmykssk30a4Rp3v9QIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFJF+M4nFCHYj
# uIj0Wuv+jcjtB+xOMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8G
# A1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMv
# Y3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBs
# BggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0
# LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUy
# MDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUH
# AwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQBWsSp+rmsxFLe6
# 1AE90Ken2XPgQHJDiS4SbLhvzfVjDPDmOdRE75uQohYhFMdGwHKbVmLK0lHV1Apz
# /HciZooyeoAvkHQaHmLhwBGkoyAAVxcaaUnHNIUS9LveL00PwmcSDLgN0V/Fyk20
# QpHDEukwKR8kfaBEX83AyvQzlf/boDNoWKEgpdAsL8SzCzXFLnDozzCJGq0RzwQg
# eEBr8E4K2wQ2WXI/ZJxZS/+d3FdwG4ErBFzzUiSbV2m3xsMP3cqCRFDtJ1C3/Jnj
# XMChnm9bLDD1waJ7TPp5wYdv0Ol9+aN0t1BmOzCj8DmqKuUwzgCK9Tjtw5KUjaO6
# QjegHzndX/tZrY792dfRAXr5dGrKkpssIHq6rrWO4PlL3OS+4ciL/l8pm+oNJXWG
# XYJL5H6LNnKyXJVEw/1FbO4+Gz+U4fFFxs2S8UwvrBbYccVQ9O+Flj7xTAeITJsH
# ptAvREqCc+/YxzhIKkA88Q8QhJKUDtazatJH7ZOdi0LCKwgqQO4H81KZGDSLktFv
# NRhh8ZBAenn1pW+5UBGYz2GpgcxVXKT1CuUYdlHR9D6NrVhGqdhGTg7Og/d/8oMl
# PG3YjuqFxidiIsoAw2+MhI1zXrIi56t6JkJ75J69F+lkh9myJJpNkx41sSB1XK2j
# JWgq7VlBuP1BuXjZ3qgym9r1wv0MtTCCB3EwggVZoAMCAQICEzMAAAAVxedrngKb
# SZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
# EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
# ZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj
# YXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
# NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
# B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
# AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEB
# AQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXI
# yjVX9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjo
# YH1qUoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1y
# aa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v
# 3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1oO5pG
# ve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg3viS
# kR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYr
# bqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
# jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSL
# W6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AF
# emzFER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIu
# rQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIE
# FgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWn
# G1M1GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEW
# M2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5
# Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBi
# AEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV
# 9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3Js
# Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
# MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8v
# d3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2
# LTIzLmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv
# 6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZn
# OlNN3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1
# bSNU5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4
# rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU
# 6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCrdTDF
# NLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/
# HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdU
# CbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
# excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTm
# dHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZq
# ELQdVTNYs6FwZvKhggNNMIICNQIBATCB+aGB0aSBzjCByzELMAkGA1UEBhMCVVMx
# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJp
# Y2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNOOkE5MzUtMDNF
# MC1EOTQ3MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMK
# AQEwBwYFKw4DAhoDFQCraYf1xDk2rMnU/VJo2GGK1nxo8aCBgzCBgKR+MHwxCzAJ
# BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
# MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
# c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBCwUAAgUA6ymJpTAi
# GA8yMDI1MDEwODIzMzI1M1oYDzIwMjUwMTA5MjMzMjUzWjB0MDoGCisGAQQBhFkK
# BAExLDAqMAoCBQDrKYmlAgEAMAcCAQACAiY0MAcCAQACAhO3MAoCBQDrKtslAgEA
# MDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAI
# AgEAAgMBhqAwDQYJKoZIhvcNAQELBQADggEBAAQlwho/Cpc2tSYw1vt8Nusm/AJf
# /Yqg9evZ8PETElVrzhayzWqvq1NvLQUDBF/h2v4OUD3KLxjhCUKlA/o7mMBoFc7q
# pe/AyIaAE19CN0TkdcyLEa/SMG0cUnkOoFF+Oo+eSKd3uznYnmYR9I06LuajHlTh
# Xy6N7GOr7J6gOB8vBmPsT7MG2CqyCfzRkz32sb2aUq0NAptBFpcJne91zFxwTUaX
# k5wQRyQe94HO9RW2NESkZ9EwvsW2ePzGIpcqLVg7IuOBlV/s89WyfkeoQqlWEdJ4
# LeuzNFzcn08O6mzom6HBrpKEVa7+cHp+6zz+CnEsBGgajWh5fn53NsRbIGoxggQN
# MIIECQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
# MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
# MSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAekP
# cTB+XfESNgABAAAB6TANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0G
# CyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCCpP7g08NEzjQeaPe5UTCEsKJwT
# xz1k1YjMYJE7W1DttDCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EIKSQkniX
# aTcmj1TKQWF+x2U4riVorGD8TwmgVbN9qsQlMIGYMIGApH4wfDELMAkGA1UEBhMC
# VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
# BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
# bWUtU3RhbXAgUENBIDIwMTACEzMAAAHpD3Ewfl3xEjYAAQAAAekwIgQgVsI9sjr0
# 4+BLBnuWLK2e0f0duiPIfutB9xw9G6dDkcIwDQYJKoZIhvcNAQELBQAEggIAO+1n
# EUzo9VHZWybYTIH4QjTECHl55sIYjDKKkwpcj3G1N6AcyIm9M2a5z/yGiQNWgOhs
# IBSaAn/whfXsyBgVLP3ZIOPQnbg9rlrmTBUMv7kRIgjpd2jYGXpzvqW78zo5AQVz
# C3StMOJ7ooino3YbHWooUtBu4kQQqgN/Smx7j13+0W0zjftbk7AFTxhf80iIAytT
# ARvw1pKweCepTofGYCaTupuWvoGsxeaudw6FUq8zB4fER3A8BnaJisxpgGm/UtqE
# an5MpIUCxzLxBGenRSSe2hTAuziXWQA6I+OsOcN2JFtGqfFrkxqOJpGjSfUxdVlo
# BOxAv7NGKDonqroJxEevwbqHhbu7068p3IGrBjakm70eKAkilWw9j/wOwYbPiwGe
# 2GbdbVWU3eP11/tjyAd/XWhCMKM3W0C/5EZ2w0MucIZU144UgrnvCblOEhFGWcm4
# axYLihdNkNHTRar9Ma7oUqPImvTu2mX6jPThkCxExNwzAGyjDAxRf8Jn1ud2a7ug
# hwglu1D90VP55zEHwTiVFZTtcibNbMBBtEQJsZkk0O8C0byMQQFWY/0cg+0WUO56
# kctSEpMUMfFW4IaxYREld1INsrBZBFdlTQZOUufvIVvn38n5pJ9hFNBWtxHTu798
# YShRaCM9WxXSTWeYz//PnJoijJkbTZ8Xpuqygw0=
# SIG # End signature block
