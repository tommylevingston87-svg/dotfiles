
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Download and install kubectl and kubelogin.
.Description
Download and install kubectl and kubelogin.
#>
function Install-AzAksCliTool
{
    [OutputType([System.Boolean])]
    [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Alias("KubectlInstallDestination")]
        [Parameter()]
        [System.String]
        # Path at which to install kubectl. Default to install into ~/.azure-kubectl/
        ${Destination},

        [Alias("KubectlInstallVersion")]
        [Parameter()]
        [System.String]
        # Version of kubectl to install, e.g. 'v1.17.2'. Default value: Latest.
        ${Version},
    
        [Alias("KubectlDownloadFromMirror")]
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Download from mirror site : https://mirror.azure.cn/kubernetes/kubectl/
        ${DownloadFromMirror},

        [Parameter()]
        [System.String]
        # Path at which to install kubectl. Default to install into ~/.azure-kubelogin/
        ${KubeloginInstallDestination},

        [Parameter()]
        [System.String]
        # Version of kubectl to install, e.g. 'v0.0.20'. Default value: Latest
        ${KubeloginInstallVersion},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Download from mirror site : https://mirror.azure.cn/kubernetes/kubelogin
        ${KubeloginDownloadFromMirror},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${PassThru},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Run cmdlet in the background
        ${AsJob},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Overwrite existing kubectl and kubelogin without prompt
        ${Force}
    )
    
    process
    {
        #Region Install kubectl
        $KubectlParams = @{}
        If ($PSBoundParameters.ContainsKey("Destination"))
        {
            $KubectlParams["Destination"] = $PSBoundParameters["Destination"]
        }
        If ($PSBoundParameters.ContainsKey("Version"))
        {
            $KubectlParams["Version"] = $PSBoundParameters["Version"]
        }
        If ($PSBoundParameters.ContainsKey("DownloadFromMirror"))
        {
            $KubectlParams["DownloadFromMirror"] = $PSBoundParameters["DownloadFromMirror"]
        }
        If ($PSBoundParameters.ContainsKey("Force"))
        {
            $KubectlParams["Force"] = $PSBoundParameters["Force"]
        }
        Install-Kubectl @KubectlParams
        #EndRegion

        #Region Install kubelogin
        $KubeloginParams = @{}
        If ($PSBoundParameters.ContainsKey("KubeloginInstallDestination"))
        {
            $KubeloginParams["Destination"] = $PSBoundParameters["KubeloginInstallDestination"]
        }
        If ($PSBoundParameters.ContainsKey("KubeloginInstallVersion"))
        {
            $KubeloginParams["Version"] = $PSBoundParameters["KubeloginInstallVersion"]
        }
        If ($PSBoundParameters.ContainsKey("KubeloginDownloadFromMirror"))
        {
            $KubeloginParams["DownloadFromMirror"] = $PSBoundParameters["KubeloginDownloadFromMirror"]
        }
        If ($PSBoundParameters.ContainsKey("Force"))
        {
            $KubeloginParams["Force"] = $PSBoundParameters["Force"]
        }
        Install-Kubelogin @KubeloginParams
        #EndRegion
    }
}

function IsWindows {
    [Microsoft.Azure.PowerShell.Cmdlets.Aks.DoNotExportAttribute()]
    param(
    )
    process {
        return (Get-OSName).contains("Windows")
    }
}

function Get-OSName {
    [Microsoft.Azure.PowerShell.Cmdlets.Aks.DoNotExportAttribute()]
    param(
    )
    process {
        if ($PSVersionTable.PSEdition.Contains("Core")) {
            $OSPlatform = $PSVersionTable.OS
        } else {
            $OSPlatform = $env:OS
        }
        return $OSPlatform
    }
}
Function Install-Kubectl
{
    [Microsoft.Azure.PowerShell.Cmdlets.Aks.DoNotExportAttribute()]
    [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter()]
        [System.String]
        ${Destination},

        [Parameter()]
        [System.String]
        ${Version},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        ${DownloadFromMirror},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        ${Force}
    )

    Process
    {
        $baseUrl = "https://storage.googleapis.com/kubernetes-release/release"
        If ($DownloadFromMirror)
        {
            $baseUrl = "https://mirror.azure.cn/kubernetes/kubectl"
        }
        If (($Null -Eq $Destination) -or ("" -Eq $Destination))
        {
            $Destination = [System.IO.Path]::Combine($env:USERPROFILE, ".azure-kubectl")
        }
        If (-not (Test-Path -Path $Destination))
        {
            New-Item -Path $Destination -ItemType Directory
        }
        $Destination = Resolve-Path -Path $Destination

        If (($Null -Eq $Version) -or ("" -Eq $Version))
        {
            $url = "$baseUrl/stable.txt"
            $Version = (Invoke-WebRequest -Uri $url).Content.Trim()
        }
        If (IsWindows)
        {
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubectl.exe")
            $downloadFileUrl = "$baseUrl/$Version/bin/windows/amd64/kubectl.exe"
        }
        ElseIf ($IsLinux)
        {
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubectl")
            $downloadFileUrl = "$baseUrl/$Version/bin/linux/amd64/kubectl"
        }
        ElseIf ($IsMacOS)
        {
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubectl")
            $downloadFileUrl = "$baseUrl/$Version/bin/darwin/amd64/kubectl"
        }
        Else
        {
            $message = "Sorry, this cmdlet is not supported in current OS."
            $ex = [System.PlatformNotSupportedException]::New($message)
            $ex.Data[[Microsoft.Azure.Commands.Common.AzurePSErrorDataKeys]::ErrorKindKey] = [Microsoft.Azure.Commands.Common.ErrorKind]::UserError
            $ex.Data[[Microsoft.Azure.Commands.Common.AzurePSErrorDataKeys]::DesensitizedErrorMessageKey] = $message
            throw $ex
        }
        #region download and install
        If ($PSCmdlet.ShouldProcess("Downloading kubectl from internet.", $destFilePath))
        {
            If (Test-Path -Path $destFilePath)
            {
                If ($Force -Or $PSCmdlet.ShouldContinue("File $destFilePath exist, are you want to replace it?", "Replace file"))
                {
                    $tmpFilePath = "$destFilePath.tmp"
                    Write-Verbose "Downloading from $downloadFileUrl to local: $tmpFilePath"
                    Invoke-WebRequest -Uri $downloadFileUrl -OutFile $tmpFilePath
                    Write-Verbose "Deleting $destFilePath"
                    Remove-Item -Path $destFilePath
                    Write-Verbose "Moving $tmpFilePath to $destFilePath"
                    Move-Item -Path $tmpFilePath -Destination $destFilePath
                }
            }
            Else
            {
                Write-Verbose "Downloading from $downloadFileUrl to local: $destFilePath"
                Invoke-WebRequest -Uri $downloadFileUrl -OutFile $destFilePath
            }
        }
        #endregion
    }
}

Function Install-Kubelogin
{
    [Microsoft.Azure.PowerShell.Cmdlets.Aks.DoNotExportAttribute()]
    [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter()]
        [System.String]
        ${Destination},

        [Parameter()]
        [System.String]
        ${Version},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        ${DownloadFromMirror},
    
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        ${Force}
    )

    Process
    {
        $baseDownloadUrl = "https://github.com/Azure/kubelogin/releases/download"
        $latestReleaseUrl = "https://api.github.com/repos/Azure/kubelogin/releases/latest"
        If ($DownloadFromMirror)
        {
            $baseDownloadUrl = "https://mirror.azure.cn/kubernetes/kubelogin"
            $latestReleaseUrl = "https://mirror.azure.cn/kubernetes/kubelogin/latest"
        }
        If (($Null -Eq $Destination) -or ("" -Eq $Destination))
        {
            $Destination = [System.IO.Path]::Combine($env:USERPROFILE, ".azure-kubelogin")
        }
        If (-not (Test-Path -Path $Destination))
        {
            New-Item -Path $Destination -ItemType Directory
        }
        $Destination = Resolve-Path -Path $Destination
        If (($Null -Eq $Version) -or ("" -Eq $Version))
        {
            $latestVersionInfo = (Invoke-WebRequest -Uri $latestReleaseUrl).Content | ConvertFrom-Json
            $Version = $latestVersionInfo.tag_name.Trim()
        }
        $downloadFileUrl = "$baseDownloadUrl/$Version/kubelogin.zip"
        If (IsWindows)
        {
            $subDir = "windows_amd64"
            $binaryName = "kubelogin.exe"
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubelogin.exe")
        }
        ElseIf ($IsLinux)
        {
            $subDir = "linux_amd64"
            $binaryName = "kubelogin"
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubelogin")
        }
        ElseIf ($IsMacOS)
        {
            If ($Env:PROCESSOR_ARCHITECTURE -Eq "AMD64")
            {
                $subDir = "darwin_amd64"
            }
            Else
            {
                $subDir = "darwin_arm64"
            }
            $binaryName = "kubelogin"
            $destFilePath = [System.IO.Path]::Combine($Destination, "kubelogin")
        }
        Else
        {
            $message = "Sorry, this cmdlet is not supported in current OS."
            $ex = [System.PlatformNotSupportedException]::New($message)
            $ex.Data[[Microsoft.Azure.Commands.Common.AzurePSErrorDataKeys]::ErrorKindKey] = [Microsoft.Azure.Commands.Common.ErrorKind]::UserError
            $ex.Data[[Microsoft.Azure.Commands.Common.AzurePSErrorDataKeys]::DesensitizedErrorMessageKey] = $message
            throw $ex
        }
        
        #region download and install
        If ($PSCmdlet.ShouldProcess("Downloading kubelogin from internet.", $destFilePath))
        {
            $downloadFilePath = [System.IO.Path]::Combine($Destination, "kubelogin.zip")
            $uncompressFolderPath = [System.IO.Path]::Combine($Destination, "kubelogin-folder")
            $binFilePath = [System.IO.Path]::Combine($uncompressFolderPath, "bin", $subDir, $binaryName)
            $shouldDownload = $true
            If (Test-Path -Path $destFilePath)
            {
                If ($Force -Or $PSCmdlet.ShouldContinue("File $destFilePath exist, are you want to replace it?", "Replace file"))
                {
                    Write-Verbose "Deleting $destFilePath"
                    Remove-Item -Path $destFilePath
                }
                Else
                {
                    $shouldDownload = $false
                }
            }
            If ($shouldDownload)
            {
                Write-Verbose "Downloading from $downloadFileUrl to local: $downloadFilePath"
                Invoke-WebRequest -Uri $downloadFileUrl -OutFile $downloadFilePath
                Expand-Archive $downloadFilePath -DestinationPath $uncompressFolderPath -Force
                Write-Verbose "Deleting $destFilePath"
                Move-Item -Path $binFilePath -Destination $destFilePath
                Write-Verbose "Deleting $downloadFilePath"
                Remove-Item $downloadFilePath
                Write-Verbose "Deleting $uncompressFolderPath"
                Remove-Item $uncompressFolderPath -Recurse
            }
        }
        #endregion
    }
}

# SIG # Begin signature block
# MIIoLAYJKoZIhvcNAQcCoIIoHTCCKBkCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCA442MKWqPKoI7z
# 19Uv47rzRJ8/QAZnDIpaF+6hiHx7hKCCDXYwggX0MIID3KADAgECAhMzAAAEBGx0
# Bv9XKydyAAAAAAQEMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjQwOTEyMjAxMTE0WhcNMjUwOTExMjAxMTE0WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQC0KDfaY50MDqsEGdlIzDHBd6CqIMRQWW9Af1LHDDTuFjfDsvna0nEuDSYJmNyz
# NB10jpbg0lhvkT1AzfX2TLITSXwS8D+mBzGCWMM/wTpciWBV/pbjSazbzoKvRrNo
# DV/u9omOM2Eawyo5JJJdNkM2d8qzkQ0bRuRd4HarmGunSouyb9NY7egWN5E5lUc3
# a2AROzAdHdYpObpCOdeAY2P5XqtJkk79aROpzw16wCjdSn8qMzCBzR7rvH2WVkvF
# HLIxZQET1yhPb6lRmpgBQNnzidHV2Ocxjc8wNiIDzgbDkmlx54QPfw7RwQi8p1fy
# 4byhBrTjv568x8NGv3gwb0RbAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQU8huhNbETDU+ZWllL4DNMPCijEU4w
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMjkyMzAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAIjmD9IpQVvfB1QehvpC
# Ge7QeTQkKQ7j3bmDMjwSqFL4ri6ae9IFTdpywn5smmtSIyKYDn3/nHtaEn0X1NBj
# L5oP0BjAy1sqxD+uy35B+V8wv5GrxhMDJP8l2QjLtH/UglSTIhLqyt8bUAqVfyfp
# h4COMRvwwjTvChtCnUXXACuCXYHWalOoc0OU2oGN+mPJIJJxaNQc1sjBsMbGIWv3
# cmgSHkCEmrMv7yaidpePt6V+yPMik+eXw3IfZ5eNOiNgL1rZzgSJfTnvUqiaEQ0X
# dG1HbkDv9fv6CTq6m4Ty3IzLiwGSXYxRIXTxT4TYs5VxHy2uFjFXWVSL0J2ARTYL
# E4Oyl1wXDF1PX4bxg1yDMfKPHcE1Ijic5lx1KdK1SkaEJdto4hd++05J9Bf9TAmi
# u6EK6C9Oe5vRadroJCK26uCUI4zIjL/qG7mswW+qT0CW0gnR9JHkXCWNbo8ccMk1
# sJatmRoSAifbgzaYbUz8+lv+IXy5GFuAmLnNbGjacB3IMGpa+lbFgih57/fIhamq
# 5VhxgaEmn/UjWyr+cPiAFWuTVIpfsOjbEAww75wURNM1Imp9NJKye1O24EspEHmb
# DmqCUcq7NqkOKIG4PVm3hDDED/WQpzJDkvu4FrIbvyTGVU01vKsg4UfcdiZ0fQ+/
# V0hf8yrtq9CkB8iIuk5bBxuPMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGgwwghoIAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAAQEbHQG/1crJ3IAAAAABAQwDQYJYIZIAWUDBAIB
# BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIALRgLG8wnY9O5zgHSunIqpY
# zEJAIHGdyUeQo37Bts9oMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
# BQAEggEAf2l2/yOZ5+NevfV8KUypI4M7dxA9jrEssi+sp7Bq532QnJHY808R2w3j
# oAgk7Sgk54BBItr0nv2Ecfs2K+/07pvwgDqDJtsak3XxSI4m0quElMrZam95N+pD
# 29hM8V1VwnPgxmfJth9fJaS5QqsdvP1dhkcdQkxO6B1PIoSEMYawYK3TSnqHhAyg
# Mlj52YH2wwo+xfMqgfjKi8NgYq4rJvhNs+3UFOIk/OzFzTRCpaMz7p69ozcQ6tFV
# aX/knWVw1sxxx3wmEGB2wFOoF+WDoPL7XZ2F4nF3jiCNjEBwmBooUM9OzGDI0YAQ
# dLaqCALUEsrrlYk8GyOt3c0yoh0P0aGCF5YwgheSBgorBgEEAYI3AwMBMYIXgjCC
# F34GCSqGSIb3DQEHAqCCF28wghdrAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsq
# hkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl
# AwQCAQUABCC2Ym/gTUo2qEuCkUOJFmteDAGU05WOxzW+7vFrxEQ9twIGaBplo2J8
# GBIyMDI1MDUxNDA5MjA0NS4wNFowBIACAfSggdGkgc4wgcsxCzAJBgNVBAYTAlVT
# MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
# ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVy
# aWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBNDAwLTA1
# RTAtRDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCC
# Ee0wggcgMIIFCKADAgECAhMzAAACAnlQdCEUfbihAAEAAAICMA0GCSqGSIb3DQEB
# CwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
# EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
# BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTI1MDEzMDE5NDI0
# NFoXDTI2MDQyMjE5NDI0NFowgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
# aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
# cG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMx
# JzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjpBNDAwLTA1RTAtRDk0NzElMCMGA1UE
# AxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEB
# BQADggIPADCCAgoCggIBALd5Knpy5xQY6Rw+Di8pYol8RB6yErZkGxhTW0Na9C7o
# v2Wn52eqtqMh014fUc3ejPeKIagla43YdU1mRw63fxpYZ5szSBRQ60+O4uG47l3r
# tilCwcEkBaFy978xV2hA+PWeOICNKI6svzEVqsUsjjpEfw14OEA9dwmlafsAjMLI
# iNk5onYNYD7pDA3PCqMGAil/WFYXCoe88R53LSei1du1Z9P28JIv2x0Mror8cf0e
# xpjnAuZRQHtJ+4sajU5YSbownIbaOLGqL03JGjKl0Xx1HKNbEpGXYnHC9t62UNOK
# jrpeWJM5ySrZGAz5mhxkRvoSg5213RcqHcvPHb0CEfGWT7p4jBq+Udi44tkMqh08
# 5U3qPUgn1uuiVjqZluhDnU6p7mcQzmH9YlfbwYtmKgSQk3yo57k/k/ZjH0eg6ou6
# BfTSoLPGrgEObzEfzkcrG8oI7kqKSilpEYa1CVeMPK6wxaWsdzJK3noOEvh1xWef
# t0W8vnTO9CUVkyFWh6FZJCSRa5SUIKog6tN7tFuadt0miwf7uUL6fneCcrLg6hnO
# 5R6rMKdIHUk1c8qcmiM/cN7nHCymLm1S9AU1+V8ZOyNmBACAMF2D8M7RMaAtEMq9
# lAJnmoi5elBHKDfvJznV73nPxTabKxTRedKlZ6KAeqTI4C0N9wimrka/sdX51rZH
# AgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQU2ga5tQ+M/Z/yJ+Qgq/DLWuVIdNkwHwYD
# VR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZO
# aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIw
# VGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBc
# BggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0
# cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYD
# VR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMC
# B4AwDQYJKoZIhvcNAQELBQADggIBAIPzdoVBTE3fseQ6gkMzWZocVlVQZypNBw+c
# 4PpShhEyYMq/QZpseUTzYBiAs+5WW6Sfse0k8XbPSOdOAB9EyfbokUs8bs79dsor
# bmGsE8nfSUG7CMBNW3nxQDUFajuWyafKu6v/qHwAXOtfKte2W/NBippFhj2TRQVj
# kYz6f1hoQQrYPbrx75r4cOZZ761gvYf707hDUxAtqD5yI3AuSP/5CXGleJai70q8
# A/S0iT58fwXfDDlU5OL1pn36o+OzPDfUfid22K8FlofmzlugmYfYlu0y5/bLuFJ0
# l0TRRbYHQURk8siZ6aUqGyUk1WoQ7tE+CXtzzVC5VI7nx9+mZvC1LGFisRLdWw+C
# Vef04MXsOqY8wb8bKwHij9CSk1Sr7BLts5FM3Oocy0f6it3ZhKZr7VvJYGv+LMgq
# CA4J0TNpkN/KbXYYzprhL4jLoBQinv8oikCZ9Z9etwwrtXsQHPGh7OQtEQRYjhe0
# /CkQGe05rWgMfdn/51HGzEvS+DJruM1+s7uiLNMCWf/ZkFgH2KhR6huPkAYvjmba
# ZwpKTscTnNRF5WQgulgoFDn5f/yMU7X+lnKrNB4jX+gn9EuiJzVKJ4td8RP0RZkg
# GNkxnzjqYNunXKcr1Rs2IKNLCZMXnT1if0zjtVCzGy/WiVC7nWtVUeRI2b6tOsvA
# rW2+G/SZMIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG
# 9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEy
# MDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIw
# MTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
# ZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
# AOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az
# /1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V2
# 9YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oa
# ezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkN
# yjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7K
# MtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRf
# NN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SU
# HDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoY
# WmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5
# C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8
# FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TAS
# BgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1
# Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUw
# UzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNy
# b3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoG
# CCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIB
# hjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fO
# mhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w
# a2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggr
# BgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
# bS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3
# DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEz
# tTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJW
# AAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G
# 82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/Aye
# ixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI9
# 5ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1j
# dEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZ
# KCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xB
# Zj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuP
# Ntq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvp
# e784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGCA1Aw
# ggI4AgEBMIH5oYHRpIHOMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
# Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
# cmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScw
# JQYDVQQLEx5uU2hpZWxkIFRTUyBFU046QTQwMC0wNUUwLUQ5NDcxJTAjBgNVBAMT
# HE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAEmJ
# SGkJYD/df+NnIjLTJ7pEnAvOoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
# UENBIDIwMTAwDQYJKoZIhvcNAQELBQACBQDrzsbNMCIYDzIwMjUwNTE0MDczNzQ5
# WhgPMjAyNTA1MTUwNzM3NDlaMHcwPQYKKwYBBAGEWQoEATEvMC0wCgIFAOvOxs0C
# AQAwCgIBAAICFDwCAf8wBwIBAAICEp8wCgIFAOvQGE0CAQAwNgYKKwYBBAGEWQoE
# AjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
# hkiG9w0BAQsFAAOCAQEAUf/xqSAGx9BtJNrFGvL2SwcRzSHh5METlaOETyrEKo2z
# RRH0ZebJ0HfoBNUbQWgKH4aL7xM+B7VHFR5/zdbNf4g3zfAZVJWM8Zp5s40h8+U3
# NR6iNz2ISaRkf/bZd0SXTe0cZhQVM3m2SpA84AXxH6LQai88M3MpbBvik/jHlMIz
# 0giK2uXj2csqtQK0Z2yx6BRsJzHrvT/BbI8buffj20Hm7T5TqfSVqZO/Na4HlpNc
# PUnyh+d2FbaJBjUdGZGkjx8RulF/UevT25MXvK1d3Q+cPTXS/Dufainyz31afMMa
# NbEIEWPWUQRAuFsUVRHrNU+iwoJlypUFbDsQQ0f7wjGCBA0wggQJAgEBMIGTMHwx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
# Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAACAnlQdCEUfbihAAEAAAIC
# MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw
# LwYJKoZIhvcNAQkEMSIEIBwR/cL+7EJXo8PgHGY1z7Ed1oO5AIRFbKbhQ7QAwbTv
# MIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg843qARgHlsvNcta5SYvxl3zF
# cCypeSx50XKiV8yUX+wwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg
# MjAxMAITMwAAAgJ5UHQhFH24oQABAAACAjAiBCCZWYm+AZdRldJo8JHzOTyZliZ8
# IbKnRpcIDbOwdB0NUTANBgkqhkiG9w0BAQsFAASCAgCiTsTbvCIn0cyhR4seyu/q
# wY/cWawVeQzobKoIAo9UU7YsBkKf8zdhPjGsbKfwEzFYcpiMtN42hxuh59j4JxRX
# P4thRYKfyWNbgCeFcY5vGtjWdJ7hRAKLzRKwsZ08K0pjb98KeQ/1On8IWNhmmKZx
# QR5d8ICXwL4+jLRJxUEl3HWMq3SlazanN6B0s+TcwGX148zV19jjHJuhKlv+rr9n
# 3rihNMtSN6EFjn4XfSaz5UFsaRonAzPfNbX4/AD4pEIfizhYi3it7LW6LulttOjJ
# 6dhWSCPQ5jLYpaXy8dl6a0+EmF7GnZuOLfpGP0gPEE8Sl0yFZCny/wPdW4TV1njH
# x1g72R/gSv5MZhVNKdFDbupZzOej1aQ8599MPvBOHrA54pPCwi5ergQYBu8LVu65
# DYjXBwtPZtJ77OSgzDih2G1Ny3C0ih7Fqx2hJkENV52lSiCimc785zGlxbXrLhaX
# 3N25SkQJtHh7z11CPf//Tk1UdDyQTIcJA6XV1ILgweryqD5QvhAYErLpaAVtk66L
# GCwpp2Nku4TX1uY6h595xWGa4lXO1n6o/ohb3HALVozZj0yX7mEvbrlOhcZvPMra
# peNsY+Enhpfp71wmg3uG+KX75bnYB/dmkXrsTVpNIDD6voZZY9/TiIDUIY9Jmq0x
# TG46i07qy+pEfRdu8biP2A==
# SIG # End signature block
